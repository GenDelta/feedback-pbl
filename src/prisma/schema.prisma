// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  name            String
  email           String         @unique
  password        String?
  emailVerified   DateTime?      @map("email_verified")
  image           String?
  branch          String? // Added branch field for user
  role            String
  feedbackName_ID String?
  feedbackName    FeedBack_Name? @relation(fields: [feedbackName_ID], references: [Feedback_Name_ID], onDelete: SetNull)
  student         Student?
  faculty         Faculty?
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

model Student {
  Student_ID      String         @id @default(uuid())
  user_ID         String         @unique
  PRN             String         @unique
  branch          String
  semester        Int
  department      String
  feedbackName_ID String?
  feedbackName    FeedBack_Name? @relation(fields: [feedbackName_ID], references: [Feedback_Name_ID], onDelete: SetNull)
  user            User           @relation(fields: [user_ID], references: [id], onDelete: Cascade)
  electives       Electives[]
  feedbacks       Feedback[] // Added relation to feedback
}

model Faculty {
  Faculty_ID      String            @id @default(uuid())
  user_ID         String            @unique
  department      String
  feedbackName_ID String?
  feedbackName    FeedBack_Name?    @relation(fields: [feedbackName_ID], references: [Feedback_Name_ID], onDelete: SetNull)
  user            User              @relation(fields: [user_ID], references: [id], onDelete: Cascade)
  facultySubjects Faculty_Subject[]
  feedbacks       Feedback[] // Added relation to feedback
}

model Subject {
  Subject_ID      String            @id @default(uuid())
  name            String
  type            String
  feedbackName_ID String?
  feedbackName    FeedBack_Name?    @relation(fields: [feedbackName_ID], references: [Feedback_Name_ID], onDelete: SetNull)
  facultySubjects Faculty_Subject[]
  electives       Electives[]
  feedbacks       Feedback[] // Added relation to feedback
}

model Faculty_Subject {
  Faculty_ID String
  Subject_ID String
  batch      String
  faculty    Faculty @relation(fields: [Faculty_ID], references: [Faculty_ID], onDelete: Cascade)
  subject    Subject @relation(fields: [Subject_ID], references: [Subject_ID], onDelete: Cascade)

  @@id([Faculty_ID, Subject_ID])
}

model Electives {
  Student_ID String
  Subject_ID String
  student    Student @relation(fields: [Student_ID], references: [Student_ID], onDelete: Cascade)
  subject    Subject @relation(fields: [Subject_ID], references: [Subject_ID], onDelete: Cascade)

  @@id([Student_ID, Subject_ID])
}

model FeedBack_Name {
  Feedback_Name_ID String      @id @default(uuid())
  name             String
  students         Student[]
  faculties        Faculty[]
  subjects         Subject[]
  questions        Questions[]
  User             User[]
  feedbacks        Feedback[] // Added relation to feedback

  @@map("feedback_name")
}

model Questions {
  Question_ID String        @id @default(uuid())
  question    String
  feedback_ID String
  feedback    FeedBack_Name @relation(fields: [feedback_ID], references: [Feedback_Name_ID], onDelete: Cascade)
  feedbacks   Feedback[] // Added relation to feedback
}

// New model for storing feedback responses
model Feedback {
  Feedback_ID      String   @id @default(uuid())
  feedback_name_ID String
  student_ID       String? // Changed to nullable
  faculty_ID       String?
  subject_ID       String?
  question_ID      String
  answer           String
  timestamp        DateTime @default(now())
  isValid          Int      @default(0)

  // Relations
  feedbackName FeedBack_Name @relation(fields: [feedback_name_ID], references: [Feedback_Name_ID], onDelete: Cascade)
  student      Student?      @relation(fields: [student_ID], references: [Student_ID], onDelete: SetNull) // Changed to optional relation
  faculty      Faculty?      @relation(fields: [faculty_ID], references: [Faculty_ID], onDelete: SetNull)
  subject      Subject?      @relation(fields: [subject_ID], references: [Subject_ID], onDelete: SetNull)
  question     Questions     @relation(fields: [question_ID], references: [Question_ID], onDelete: Cascade)

  @@unique([student_ID, faculty_ID, subject_ID, question_ID, feedback_name_ID])
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction) // Added onUpdate constraint

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction) // Added onUpdate constraint
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token], map: "UQ_VerificationRequest_identifier_token")
}

// New model for storing student remarks
model Remarks {
  Remark_ID String   @id @default(uuid())
  remark    String
  branch    String
  timestamp DateTime @default(now())
}

// New model for visibility control
model Visibility_State {
  Visibility_Name String @id
  State           Int    @default(1) // 1 for visible, 0 for denied
}
